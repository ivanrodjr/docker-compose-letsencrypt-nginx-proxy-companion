#
# docker-compose-letsencrypt-nginx-proxy-companion
#
# A Web Proxy using docker with NGINX and Let's Encrypt
# Using the great community docker-gen, nginx-proxy and docker-letsencrypt-nginx-proxy-companion
#
# This is the .env file to set up your webproxy enviornment

#
# Image versions
#
NGINX_VERSION=1.17.1
DOCKER_GEN_VERSION=0.7.0
LETS_ENCRYPT_VERSION=latest
MYSQL_VERSION=5.7

#
# Your local containers NAME
#
NGINX_WEB=nginx-web
DOCKER_GEN=nginx-gen
LETS_ENCRYPT=nginx-letsencrypt
GHOST_BLOG=ghost-blog
MYSQL_DB=mysql-db

#
# Set the IP address of the external access Interface (instance)
#
IP=0.0.0.0

#
# Default Network
#
NETWORK=webproxy

# If you want to customize the created network, use the following variable
#NETWORK_OPTIONS="--opt encrypted=true"

#
# Service Network (Optional)
#
# In case you decide to add a new network to your services containers you can set this
# network as a SERVICE_NETWORK
#
# [WARNING] This setting was built to use our `start.sh` script or in that special case
#           you could use the docker-composer with our multiple network option, as of:
#           `docker-compose -f docker-compose-multiple-networks.yml up -d`
#
#SERVICE_NETWORK=blog-database

# If you want to customize the created network, use the following variable
#SERVICE_NETWORK_OPTIONS="--opt encrypted=true"

#
## NGINX file path (mount into the host)
# Here you can configure the path where nginx stores all the configurations and certificates.
# With the value ./nginx-data it creates a new sub-folder into your current path.

NGINX_FILES_PATH=./nginx-data
#
# NGINX use special conf files
#
# In case you want to add some special configuration to your NGINX Web Proxy you could
# add your files to ./conf.d/ folder as of sample file 'uploadsize.conf'
#
# [WARNING] This setting was built to use our `start.sh`.
#
# [WARNING] Once you set this options to true all your files will be copied to data
#           folder (./data/conf.d). If you decide to remove this special configuration
#           you must delete your files from data folder ./data/conf.d.
#
USE_NGINX_CONF_FILES=true

#
# Docker Logging Config
#
# This section offers two options max-size and max-file, which follow the docker documentation
# as follow:
#
# logging:
#      driver: "json-file"
#      options:
#        max-size: "200k"
#        max-file: "10"
#
#NGINX_WEB_LOG_DRIVER=json-file
#NGINX_WEB_LOG_MAX_SIZE=4m
#NGINX_WEB_LOG_MAX_FILE=10

#NGINX_GEN_LOG_DRIVER=json-file
#NGINX_GEN_LOG_MAX_SIZE=2m
#NGINX_GEN_LOG_MAX_FILE=10

#NGINX_LETSENCRYPT_LOG_DRIVER=json-file
#NGINX_LETSENCRYPT_LOG_MAX_SIZE=2m
#NGINX_LETSENCRYPT_LOG_MAX_FILE=10

# GHOST_BLOG_LOG_DRIVER=json-file
# GHOST_BLOG_LOG_MAX_SIZE=2m
# GHOST_BLOG_LOG_MAX_FILE=10

# MYSQL_DB_LOG_DRIVER=json-file
# MYSQL_DB__LOG_MAX_SIZE=2m
# MYSQL_DB__LOG_MAX_FILE=10

# Set the local exposed ports for http and https on the Host
#
# NOTE: The default values are 80 and 443, only change this options if you really know what you are doing
#
#DOCKER_HTTP=80
#DOCKER_HTTPS=443

#
# MySql configuration
#

MYSQL_FILES_PATH=./mysql-data
ROOT_PASSWORD=rootpassword
DB_GHOST_DATABASE=ghostdb
DB_USER=user
DB_PASSWORD=password

#
# Ghost configuration
#

GHOST_FILES_PATH=./ghost-data
# Enter the exact URL your publication will be available at and include the protocol for HTTP (if LETS_ENCRYPT_STAGING=true) or HTTPS. For example:
URL=https://example.com
VIRTUAL_PORT=2368
VIRTUAL_HOST=localhost
#
#LETS_ENCRYPT_HOST= Domain to certificate
#
#LETS_ENCRYPT_EMAIL= Email to register the ssl certificate e.g. example@example.com
#
#LETS_ENCRYPT_STAGING=true | Change to false to get prod ssl certificate
#
#MAILGUN_USER=Mailgun api username for your account
#
#MAILGUN_PASSWORD=Mailgun api password for your account
